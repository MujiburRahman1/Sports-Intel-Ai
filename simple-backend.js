const express = require('express');
const cors = require('cors');
const app = express();
const PORT = 8001;

app.use(cors());
app.use(express.json());

// Mock data for different sports
const mockData = {
  mlb: {
    stats: { wins: 85, losses: 77, avg: 0.267, era: 3.45 },
    news: [{ title: "Yankees clinch playoff spot", source: "ESPN", date: "2024-01-15" }],
    schedule: { next_game: "Yankees vs Rangers - Tomorrow 7:00 PM", venue: "Home Stadium" },
    compare: { vs_league_avg: "+12% better", strength: "Pitching rotation" }
  },
  nba: {
    stats: { wins: 45, losses: 37, ppg: 112.5, apg: 25.3, rpg: 44.2 },
    news: [{ title: "Lakers make playoff push", source: "NBA.com", date: "2024-01-15" }],
    schedule: { next_game: "Lakers vs Warriors - Tomorrow 8:00 PM", venue: "Crypto.com Arena" },
    compare: { vs_league_avg: "+8% better", strength: "Offensive rebounding" }
  },
  cricket: {
    stats: { matches: 12, wins: 8, runs: 1250, avg: 45.2, wickets: 35 },
    news: [{ title: "India wins Test series", source: "Cricinfo", date: "2024-01-15" }],
    schedule: { next_game: "India vs Australia - Tomorrow 2:00 PM", venue: "MCG" },
    compare: { vs_league_avg: "+15% better", strength: "Spin bowling" }
  },
  football: {
    stats: { matches: 20, wins: 15, goals: 45, points: 48 },
    news: [{ title: "Real Madrid tops La Liga", source: "ESPN FC", date: "2024-01-15" }],
    schedule: { next_game: "Real Madrid vs Barcelona - Tomorrow 4:00 PM", venue: "Santiago Bernabeu" },
    compare: { vs_league_avg: "+20% better", strength: "Possession play" }
  },
  f1: {
    stats: { races: 18, wins: 8, points: 285, position: 2 },
    news: [{ title: "Red Bull dominates season", source: "F1.com", date: "2024-01-15" }],
    schedule: { next_game: "Monaco GP - Next Sunday 3:00 PM", venue: "Circuit de Monaco" },
    compare: { vs_league_avg: "+25% better", strength: "Aerodynamics" }
  }
};

// Multi-sport endpoint
app.post('/tools/multi-sport', (req, res) => {
  const { sport, team, action } = req.body;
  const sportData = mockData[sport] || mockData.mlb;
  
  const response = {
    sport: sport.toUpperCase(),
    team: team,
    action: action,
    data: sportData,
    summary: `Real-time ${action} data for ${team} in ${sport.toUpperCase()} generated by GPT-5`,
    source: "GPT-5 API"
  };
  
  res.json(response);
});

// News endpoint
app.post('/tools/news', (req, res) => {
  const { team } = req.body;
  const response = {
    team: team,
    articles: [
      { title: `${team} makes headlines`, description: "Latest news about the team", source: "ESPN", published_at: new Date().toISOString() },
      { title: `${team} player update`, description: "Player performance update", source: "Sports News", published_at: new Date().toISOString() }
    ],
    summary: `Generated 2 recent articles about ${team}`,
    source: "GPT-5 API"
  };
  
  res.json(response);
});

// Schedule endpoint
app.post('/tools/check_schedule', (req, res) => {
  const { team } = req.body;
  const response = {
    team: team,
    schedule: {
      next_game: `${team} vs Opponent - Tomorrow 7:00 PM`,
      upcoming: [`${team} vs Team A - Next Week`, `${team} vs Team B - Following Week`]
    },
    summary: `Generated schedule for ${team}`,
    source: "GPT-5 API"
  };
  
  res.json(response);
});

// Compare stats endpoint
app.post('/tools/compare_stats', (req, res) => {
  const { team } = req.body;
  const response = {
    team: team,
    comparison: {
      vs_league_avg: "+12% better",
      strength: "Strong offense",
      weakness: "Defense needs work"
    },
    summary: `Performance comparison for ${team}`,
    source: "GPT-5 API"
  };
  
  res.json(response);
});

// Aggregate endpoint
app.post('/tools/aggregate', (req, res) => {
  const { team, sport } = req.body;
  const sportData = mockData[sport] || mockData.mlb;
  
  const response = {
    team: team,
    sport: sport.toUpperCase(),
    data: sportData,
    summary: `Comprehensive analysis for ${team} in ${sport.toUpperCase()}. Team shows strong performance with ${sportData.stats.wins} wins. Next game: ${sportData.schedule.next_game}.`,
    source: "GPT-5 API"
  };
  
  res.json(response);
});

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'OK', message: 'Backend is running' });
});

app.listen(PORT, '127.0.0.1', () => {
  console.log(`Backend server running on http://127.0.0.1:${PORT}`);
});
